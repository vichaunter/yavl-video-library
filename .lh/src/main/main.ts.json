{
    "sourceFile": "src/main/main.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1708873603866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708873624035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,10 @@\n   const sourceMapSupport = require('source-map-support');\n   sourceMapSupport.install();\n }\n \n-const isDebug =\n-  process.env.NODE_ENV === 'development' || process.env.DEBUG_PROD === 'true';\n+const isDebug = true\n+  //process.env.NODE_ENV === 'development' || process.env.DEBUG_PROD === 'true';\n \n if (isDebug) {\n   require('electron-debug')();\n }\n"
                },
                {
                    "date": 1708873680579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,10 @@\n   const sourceMapSupport = require('source-map-support');\n   sourceMapSupport.install();\n }\n \n-const isDebug = true;\n-//process.env.NODE_ENV === 'development' || process.env.DEBUG_PROD === 'true';\n+const isDebug =\n+  process.env.NODE_ENV === 'development' || process.env.DEBUG_PROD === 'true';\n \n if (isDebug) {\n   require('electron-debug')();\n }\n"
                },
                {
                    "date": 1708873820795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,8 +114,10 @@\n       });\n     });\n   }\n \n+  mainWindow.webContents.openDevTools();\n+  \n   // Remove this if your app does not use auto updates\n   // eslint-disable-next-line\n   new AppUpdater();\n };\n"
                }
            ],
            "date": 1708873603866,
            "name": "Commit-0",
            "content": "/* eslint global-require: off, no-console: off, promise/always-return: off */\n\n/**\n * This module executes inside of electron's main process. You can start\n * electron renderer process from here and communicate with the other processes\n * through IPC.\n *\n * When running `npm run build` or `npm run build:main`, this file is compiled to\n * `./src/main.js` using webpack. This gives us some performance wins.\n */\nimport { BrowserWindow, app, ipcMain, shell } from 'electron';\nimport log from 'electron-log';\nimport { autoUpdater } from 'electron-updater';\nimport path from 'path';\nimport { HANDLERS } from './constants';\nimport handlers from './handlers';\nimport MenuBuilder from './menu';\nimport { HandlersType } from './types';\nimport { resolveHtmlPath } from './util';\n\nclass AppUpdater {\n  constructor() {\n    log.transports.file.level = 'info';\n    autoUpdater.logger = log;\n    autoUpdater.checkForUpdatesAndNotify();\n  }\n}\n\nlet mainWindow: BrowserWindow | null = null;\n\nif (process.env.NODE_ENV === 'production') {\n  const sourceMapSupport = require('source-map-support');\n  sourceMapSupport.install();\n}\n\nconst isDebug =\n  process.env.NODE_ENV === 'development' || process.env.DEBUG_PROD === 'true';\n\nif (isDebug) {\n  require('electron-debug')();\n}\n\nconst installExtensions = async () => {\n  const installer = require('electron-devtools-installer');\n  const forceDownload = !!process.env.UPGRADE_EXTENSIONS;\n  const extensions = ['REACT_DEVELOPER_TOOLS'];\n\n  return installer\n    .default(\n      extensions.map((name) => installer[name]),\n      forceDownload,\n    )\n    .catch(console.log);\n};\n\nconst createWindow = async () => {\n  if (isDebug) {\n    await installExtensions();\n  }\n\n  const RESOURCES_PATH = app.isPackaged\n    ? path.join(process.resourcesPath, 'assets')\n    : path.join(__dirname, '../../assets');\n\n  const getAssetPath = (...paths: string[]): string => {\n    return path.join(RESOURCES_PATH, ...paths);\n  };\n\n  mainWindow = new BrowserWindow({\n    show: false,\n    width: 1024,\n    height: 728,\n    icon: getAssetPath('icon.png'),\n    webPreferences: {\n      preload: app.isPackaged\n        ? path.join(__dirname, 'preload.js')\n        : path.join(__dirname, '../../.erb/dll/preload.js'),\n    },\n  });\n\n  mainWindow.loadURL(resolveHtmlPath('index.html'));\n\n  mainWindow.on('ready-to-show', () => {\n    if (!mainWindow) {\n      throw new Error('\"mainWindow\" is not defined');\n    }\n    if (process.env.START_MINIMIZED) {\n      mainWindow.minimize();\n    } else {\n      mainWindow.show();\n    }\n  });\n\n  mainWindow.on('closed', () => {\n    mainWindow = null;\n  });\n\n  const menuBuilder = new MenuBuilder(mainWindow);\n  menuBuilder.buildMenu();\n\n  // Open urls in the user's browser\n  mainWindow.webContents.setWindowOpenHandler((edata) => {\n    shell.openExternal(edata.url);\n    return { action: 'deny' };\n  });\n\n  // Map all handlers, remember to add them to handlers/index and to the HANDLERS\n  for (let key in HANDLERS) {\n    ipcMain.handle(HANDLERS[key as HandlersType], async (event, args) => {\n      return await handlers[key as HandlersType]({\n        event,\n        args,\n        window: mainWindow as BrowserWindow,\n      });\n    });\n  }\n\n  // Remove this if your app does not use auto updates\n  // eslint-disable-next-line\n  new AppUpdater();\n};\n\n/**\n * Add event listeners...\n */\n\napp.on('window-all-closed', () => {\n  // Respect the OSX convention of having the application in memory even\n  // after all windows have been closed\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp\n  .whenReady()\n  .then(() => {\n    createWindow();\n    app.on('activate', () => {\n      // On macOS it's common to re-create a window in the app when the\n      // dock icon is clicked and there are no other windows open.\n      if (mainWindow === null) createWindow();\n    });\n  })\n  .catch(console.log);\n"
        }
    ]
}